import asyncio
import random
import datetime
import os
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes, CommandHandler

TOKEN = os.getenv("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ Render Environment
ADMIN_ID = int(os.getenv("ADMIN_ID", "1437371039"))
ALLOWED_CHAT = os.getenv("ALLOWED_CHAT", "dukasino_g")  # —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞

# –ü—Ä–æ–º–æ–∫–æ–¥—ã
promo_codes = {
    "FREE777": {"uses": 5, "expires": "2025-09-10", "users": []},
    "WELCOME": {"uses": 10, "expires": "2025-09-30", "users": []}
}

# –¢–∞–±–ª–∏—Ü–∞ –∑–Ω–∞—á–µ–Ω–∏–π (1‚Äì64)
slot_table = {
    1: "üç∑üç∑üç∑", 2: "üçíüç∑üç∑", 3: "üçãüç∑üç∑", 4: "7Ô∏è‚É£üç∑üç∑",
    5: "üç∑üçíüç∑", 6: "üçíüçíüç∑", 7: "üçãüçíüç∑", 8: "7Ô∏è‚É£üçíüç∑",
    9: "üç∑üçãüç∑", 10: "üçíüçãüç∑", 11: "üçãüçãüç∑", 12: "7Ô∏è‚É£üçãüç∑",
    13: "üç∑7Ô∏è‚É£üç∑", 14: "üçí7Ô∏è‚É£üç∑", 15: "üçã7Ô∏è‚É£üç∑", 16: "7Ô∏è‚É£7Ô∏è‚É£üç∑",
    17: "üç∑üç∑üçí", 18: "üçíüç∑üçí", 19: "üçãüç∑üçí", 20: "üçí7Ô∏è‚É£üçí",
    21: "üç∑üçíüçí", 22: "üçíüçíüçí", 23: "üçãüçíüçí", 24: "7Ô∏è‚É£üçíüçí",
    25: "üç∑üçãüçí", 26: "üçíüçãüçí", 27: "üçãüçãüçí", 28: "7Ô∏è‚É£üçãüçí",
    29: "üç∑7Ô∏è‚É£üçí", 30: "üçí7Ô∏è‚É£üçí", 31: "üçã7Ô∏è‚É£üçí", 32: "7Ô∏è‚É£7Ô∏è‚É£üçí",
    33: "üç∑üç∑üçã", 34: "üçíüç∑üçã", 35: "üçãüç∑üçã", 36: "7Ô∏è‚É£üç∑üçã",
    37: "üç∑üçíüçã", 38: "üçíüçíüçã", 39: "üçãüçíüçã", 40: "7Ô∏è‚É£üçíüçã",
    41: "üç∑üçãüçã", 42: "üçíüçãüçã", 43: "üçãüçãüçã", 44: "7Ô∏è‚É£üçãüçã",
    45: "üç∑7Ô∏è‚É£üçã", 46: "üçí7Ô∏è‚É£üçã", 47: "üçã7Ô∏è‚É£üçã", 48: "7Ô∏è‚É£7Ô∏è‚É£üçã",
    49: "üç∑üç∑7Ô∏è‚É£", 50: "üçíüç∑7Ô∏è‚É£", 51: "üçãüç∑7Ô∏è‚É£", 52: "7Ô∏è‚É£üç∑7Ô∏è‚É£",
    53: "üç∑üçí7Ô∏è‚É£", 54: "üçíüçí7Ô∏è‚É£", 55: "üçãüçí7Ô∏è‚É£", 56: "7Ô∏è‚É£üçí7Ô∏è‚É£",
    57: "üç∑üçã7Ô∏è‚É£", 58: "üçíüçã7Ô∏è‚É£", 59: "üçãüçã7Ô∏è‚É£", 60: "7Ô∏è‚É£üçã7Ô∏è‚É£",
    61: "üç∑7Ô∏è‚É£7Ô∏è‚É£", 62: "üçí7Ô∏è‚É£7Ô∏è‚É£", 63: "üçã7Ô∏è‚É£7Ô∏è‚É£", 64: "7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£"
}

# –§—Ä–∞–∑—ã
jackpot_responses = [
    "üéâ –î–∂–µ–∫–ø–æ—Ç! –ë–æ–≥ —Å–ª–æ—Ç-–º–∞—à–∏–Ω—ã —É–ª—ã–±–Ω—É–ª—Å—è!\n(–∂–¥–∏—Ç–µ, –∞–¥–º–∏–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 12 —á–∞—Å–æ–≤)",
    "üî• –£–¥–∞—á–∞ –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ, —ç—Ç–æ —Ç—Ä–∏ —Å–µ–º—ë—Ä–∫–∏!\n(–∂–¥–∏—Ç–µ, –∞–¥–º–∏–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 12 —á–∞—Å–æ–≤)",
    "üí∞ –¢—ã —Å–æ—Ä–≤–∞–ª –∫—É—à! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–∞–∑–∏–Ω–æ.\n(–∂–¥–∏—Ç–µ, –∞–¥–º–∏–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 12 —á–∞—Å–æ–≤)",
    "üé∞ 777! –ï—Å–ª–∏ –±—ã —ç—Ç–æ –±—ã–ª–æ –≤ –í–µ–≥–∞—Å–µ ‚Äî —Ç—ã –±—ã —É–∂–µ –±—ã–ª –º–∏–ª–ª–∏–æ–Ω–µ—Ä–æ–º.\n(–∂–¥–∏—Ç–µ, –∞–¥–º–∏–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 12 —á–∞—Å–æ–≤)"
]

medium_responses = [
    "üçãüçãüçã! –°—Ä–µ–¥–Ω–∏–π –∫—É—à, –∑–∞–±–∏—Ä–∞–π –ø—Ä–∏–∑! ü§ë\n(–∂–¥–∏—Ç–µ, –∞–¥–º–∏–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 12 —á–∞—Å–æ–≤)",
    "–õ–∏–º–æ–Ω—á–∏–∫–∏ —Å—ã–≥—Ä–∞–ª–∏! üçãüçãüçã ‚Äî –Ω–µ –¥–∂–µ–∫–ø–æ—Ç, –Ω–æ –ø—Ä–∏—è—Ç–Ω–æ.\n(–∂–¥–∏—Ç–µ, –∞–¥–º–∏–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 12 —á–∞—Å–æ–≤)",
    "üçãüçãüçã ‚Äî –∫–∏—Å–ª–µ–Ω—å–∫–∞—è, –Ω–æ –ø—Ä–∏–±—ã–ª—å–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è.\n(–∂–¥–∏—Ç–µ, –∞–¥–º–∏–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 12 —á–∞—Å–æ–≤)"
]

small_responses = [
    "üçíüçíüçí! –ú–∞–ª–µ–Ω—å–∫–∏–π –≤—ã–∏–≥—Ä—ã—à, –Ω–æ –Ω–∞—á–∞–ª–æ –µ—Å—Ç—å! üçí\n(–∂–¥–∏—Ç–µ, –∞–¥–º–∏–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 12 —á–∞—Å–æ–≤)",
    "–¢—Ä–∏ –≤–∏—à–µ–Ω–∫–∏ üçíüçíüçí ‚Äî –¥–µ—Ä–∂–∏ —É—Ç–µ—à–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–∑.\n(–∂–¥–∏—Ç–µ, –∞–¥–º–∏–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 12 —á–∞—Å–æ–≤)",
    "üçíüçíüçí ‚Äî –º–µ–ª–æ—á—å, –∞ –ø—Ä–∏—è—Ç–Ω–æ.\n(–∂–¥–∏—Ç–µ, –∞–¥–º–∏–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 12 —á–∞—Å–æ–≤)"
]

lose_responses = [
    "‚ùå –ù–µ –ø–æ–≤–µ–∑–ª–æ... –∞–≤—Ç–æ–º–∞—Ç —Å–º–µ—ë—Ç—Å—è.",
    "üòÖ –£–≤—ã, —Å–µ–≥–æ–¥–Ω—è –±–µ–∑ –≤—ã–∏–≥—Ä—ã—à–∞.",
    "üôÉ –ü–æ—á—Ç–∏! –ù–æ –Ω–µ—Ç.",
    "üö¨ –ê–≤—Ç–æ–º–∞—Ç —Å—ä–µ–ª –º–æ–Ω–µ—Ç–∫—É –∏ –º–æ–ª—á–∏—Ç."
]

# ===== –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–µ =====
def check_group(update: Update) -> bool:
    chat = update.message.chat
    return chat.username == ALLOWED_CHAT

# ===== –ü—Ä–æ–∫—Ä—É—Ç =====
async def do_spin(update: Update, context: ContextTypes.DEFAULT_TYPE, mention: str, promo: bool = False):
    await asyncio.sleep(2)
    value = random.randint(1, 64) if promo else update.message.dice.value
    combo = slot_table.get(value, f"–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ({value})")

    chat = update.message.chat
    if chat.username:
        msg_link = f"https://t.me/{chat.username}/{update.message.message_id}"
    else:
        msg_link = "(–≥—Ä—É–ø–ø–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è, —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)"

    if combo == "7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£":
        reply = f"{mention} –ø–æ–∫—Ä—É—Ç–∏–ª –∏ –≤—ã–ø–∞–ª–æ:\n {combo}\n{random.choice(jackpot_responses)}"
        await context.bot.send_message(ADMIN_ID, f"üî• –£ {mention} –î–ñ–ï–ö–ü–û–¢! üé∞ ({combo})\n–°—Å—ã–ª–∫–∞: {msg_link}")
    elif combo == "üçãüçãüçã":
        reply = f"{mention} –ø–æ–∫—Ä—É—Ç–∏–ª –∏ –≤—ã–ø–∞–ª–æ:\n {combo}\n{random.choice(medium_responses)}"
        await context.bot.send_message(ADMIN_ID, f"‚ö° –£ {mention} —Å—Ä–µ–¥–Ω–∏–π –≤—ã–∏–≥—Ä—ã—à! üçãüçãüçã ({combo})\n–°—Å—ã–ª–∫–∞: {msg_link}")
    elif combo == "üçíüçíüçí":
        reply = f"{mention} –ø–æ–∫—Ä—É—Ç–∏–ª –∏ –≤—ã–ø–∞–ª–æ:\n {combo}\n{random.choice(small_responses)}"
        await context.bot.send_message(ADMIN_ID, f"üçí –£ {mention} –º–∞–ª–µ–Ω—å–∫–∏–π –≤—ã–∏–≥—Ä—ã—à! üçíüçíüçí ({combo})\n–°—Å—ã–ª–∫–∞: {msg_link}")
    else:
        reply = f"{mention} –ø–æ–∫—Ä—É—Ç–∏–ª –∏ –≤—ã–ø–∞–ª–æ:\n {combo}\n{random.choice(lose_responses)}"

    await update.message.reply_text(reply)

# ===== –ü—Ä–æ–º–æ–∫–æ–¥—ã =====
async def promo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_group(update):
        await update.message.reply_text(f"‚ö†Ô∏è –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ @{ALLOWED_CHAT}")
        return

    if not context.args:
        await update.message.reply_text("‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /promo –ö–û–î")
        return

    code = context.args[0].upper()
    user = update.message.from_user
    mention = f"@{user.username}" if user.username else user.first_name
    user_id = user.id

    if code not in promo_codes:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ {code} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    promo_data = promo_codes[code]

    today = datetime.date.today()
    expiry = datetime.date.fromisoformat(promo_data["expires"])
    if today > expiry:
        await update.message.reply_text(f"‚è≥ –ü—Ä–æ–º–æ–∫–æ–¥ {code} –∏—Å—Ç—ë–∫ ({promo_data['expires']}).")
        return

    if promo_data["uses"] <= 0:
        await update.message.reply_text(f"‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ {code} —É–∂–µ –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–Ω.")
        return

    if user_id in promo_data["users"]:
        await update.message.reply_text(f"‚ö†Ô∏è –¢—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ {code}.")
        return

    promo_data["uses"] -= 1
    promo_data["users"].append(user_id)

    await update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–∫—Ä—É—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await do_spin(update, context, mention, promo=True)

# ===== –ê–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–æ–º–æ =====
async def add_promo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        return
    if len(context.args) != 3:
        await update.message.reply_text("‚ö† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addpromo –ö–û–î –ß–ò–°–õ–û YYYY-MM-DD")
        return
    code, count, expiry = context.args
    if not count.isdigit():
        await update.message.reply_text("‚ö† –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º.")
        return
    try:
        datetime.date.fromisoformat(expiry)
    except ValueError:
        await update.message.reply_text("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã (YYYY-MM-DD).")
        return
    promo_codes[code.upper()] = {"uses": int(count), "expires": expiry, "users": []}
    await update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code.upper()} –¥–æ–±–∞–≤–ª–µ–Ω: {count} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π, –¥–æ {expiry}.")

async def list_promo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        return
    if not promo_codes:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.")
        return
    text = "üéü –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n"
    for k, v in promo_codes.items():
        text += f"{k} ‚Üí {v['uses']} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π, –¥–æ {v['expires']}, {len(v['users'])} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏\n"
    await update.message.reply_text(text)

# ===== –ö–æ–º–∞–Ω–¥–∞ /start =====
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_group(update):
        await update.message.reply_text(f"‚ö†Ô∏è –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ @{ALLOWED_CHAT}")
        return
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üé∞ –û—Ç–ø—Ä–∞–≤—å üé∞ —á—Ç–æ–±—ã –∏—Å–ø—ã—Ç–∞—Ç—å —É–¥–∞—á—É.\n–ê –µ—â—ë –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥: /promo –ö–û–î")

# ===== –ë—Ä–æ—Å–∫–∏ =====
async def handle_dice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not check_group(update):
        await update.message.reply_text(f"‚ö†Ô∏è –Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ @{ALLOWED_CHAT}")
        return
    if update.message and update.message.dice:
        emoji = update.message.dice.emoji
        user = update.message.from_user
        mention = f"@{user.username}" if user.username else user.first_name
        if emoji == "üé∞":
            await do_spin(update, context, mention, promo=False)
        else:
            await asyncio.sleep(2)
            await update.message.reply_text(f"{emoji} –í—ã–ø–∞–ª–æ: {update.message.dice.value}")

# ===== –ó–∞–ø—É—Å–∫ =====
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("promo", promo))
    app.add_handler(CommandHandler("addpromo", add_promo))
    app.add_handler(CommandHandler("listpromo", list_promo))
    app.add_handler(MessageHandler(filters.Dice.ALL, handle_dice))

    port = int(os.getenv("PORT", "10000"))
    url = os.getenv("RENDER_EXTERNAL_HOSTNAME")

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ webhook...")

    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=TOKEN,
        webhook_url=f"https://{url}/{TOKEN}"
    )

if __name__ == "__main__":
    main()
